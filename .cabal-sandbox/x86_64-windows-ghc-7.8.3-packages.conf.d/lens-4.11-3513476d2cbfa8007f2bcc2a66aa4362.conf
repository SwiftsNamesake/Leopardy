name: lens
version: 4.11
id: lens-4.11-3513476d2cbfa8007f2bcc2a66aa4362
license: BSD3
copyright: Copyright (C) 2012-2015 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
             .
             An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
             .
             A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
             .
             Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
             .
             A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
             .
             /Lenses, Folds and Traversals/
             .
             With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
             .
             .
             <<http://i.imgur.com/ALlbPRa.png>>
             .
             <Hierarchy.png (Local Copy)>
             .
             You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Lens' (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- quux :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Traversal' (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules: Control.Exception.Lens Control.Lens
                 Control.Lens.At Control.Lens.Combinators Control.Lens.Cons
                 Control.Lens.Each Control.Lens.Empty Control.Lens.Equality
                 Control.Lens.Extras Control.Lens.Fold Control.Lens.Getter
                 Control.Lens.Indexed Control.Lens.Internal
                 Control.Lens.Internal.Bazaar Control.Lens.Internal.ByteString
                 Control.Lens.Internal.Coerce Control.Lens.Internal.Context
                 Control.Lens.Internal.Deque Control.Lens.Internal.Exception
                 Control.Lens.Internal.FieldTH Control.Lens.Internal.PrismTH
                 Control.Lens.Internal.Fold Control.Lens.Internal.Getter
                 Control.Lens.Internal.Indexed Control.Lens.Internal.Instances
                 Control.Lens.Internal.Iso Control.Lens.Internal.Level
                 Control.Lens.Internal.List Control.Lens.Internal.Magma
                 Control.Lens.Internal.Prism Control.Lens.Internal.Reflection
                 Control.Lens.Internal.Review Control.Lens.Internal.Setter
                 Control.Lens.Internal.TH Control.Lens.Internal.Zoom
                 Control.Lens.Iso Control.Lens.Lens Control.Lens.Level
                 Control.Lens.Operators Control.Lens.Plated Control.Lens.Prism
                 Control.Lens.Reified Control.Lens.Review Control.Lens.Setter
                 Control.Lens.TH Control.Lens.Traversal Control.Lens.Tuple
                 Control.Lens.Type Control.Lens.Wrapped Control.Lens.Zoom
                 Control.Monad.Error.Lens Control.Parallel.Strategies.Lens
                 Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
                 Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
                 Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
                 Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
                 Generics.Deriving.Lens GHC.Generics.Lens System.Exit.Lens
                 System.FilePath.Lens System.IO.Error.Lens Language.Haskell.TH.Lens
                 Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: C:\Users\Jonatan\Desktop\Haskell\projects\Jeopardy\.cabal-sandbox\x86_64-windows-ghc-7.8.3\lens-4.11
library-dirs: C:\Users\Jonatan\Desktop\Haskell\projects\Jeopardy\.cabal-sandbox\x86_64-windows-ghc-7.8.3\lens-4.11
hs-libraries: HSlens-4.11
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.5.0.0-a620a6e52b09b01c2ee52fdc2f35ba14
         base-4.7.0.1-7c4827d45272c6220486aa798a981cbc
         bifunctors-5-e6017e2a285dd450adbf36a18c818d34
         bytestring-0.10.4.0-0168d7fce99b3d6589c7684c734053d4
         comonad-4.2.6-cbd73fc38d8f3e92353648004d5b0532
         containers-0.5.5.1-08015588ba3fe884f62b392b72b7a17f
         contravariant-1.3.1.1-c273f8145168c9916574455fca444fd0
         distributive-0.4.4-803c182a0bae4ca3b892ea311090fde2
         exceptions-0.8.0.2-aab7e2899d8cf611fa1e2df491a7b0cc
         filepath-1.3.0.2-a4d1d9ee29199e7f421cb1e2eeca7b3c
         free-4.12.1-d0f98bee722a139acf9f8d81f1d89b62
         ghc-prim-0.3.1.0-95dc0c72a075ab56f8cdd74470fc7c3d
         hashable-1.2.2.0-9a3d2aa5fb730731f055271eff5ec4f9
         kan-extensions-4.2.2-9fc0f95f0cc6f518c9ed4ca613a918ea
         mtl-2.1.3.1-045b529925f92141fbca5a09ccb76887
         parallel-3.2.0.4-4cdbad49ed76f85e8d56006bb711fdb8
         profunctors-5.1.1-501672fe063711ec0070407d911cf7d8
         reflection-1.5.2.1-680327f1f577d01d28a7f9ee2ca1107e
         semigroupoids-5.0.0.2-4b97322d369622dc9139e95c51489d4c
         semigroups-0.16.2.2-813a8fbbddc4a10f907f4c2dea5a3a5f
         tagged-0.8.1-04a9fbdad759286b328153778842f689
         template-haskell-2.9.0.0-53d2bc0fb77759033214841630b100f0
         text-1.1.0.0-1ba76b4f9f9528508a58bb9d9558efa3
         transformers-0.3.0.0-9109bceabff1fdbc3432593d49c6d75a
         transformers-compat-0.4.0.3-39bbc482bf523e6931693baf53d8b32f
         unordered-containers-0.2.4.0-078d938fe165b543ce50984c645de956
         vector-0.10.9.1-69abe49ac50325edcd4c9cf4923db8bf
         void-0.7-4aaa6083d02217b05a8d3ff1c4e600e3
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: C:\Users\Jonatan\Desktop\Haskell\projects\Jeopardy\.cabal-sandbox\doc\x86_64-windows-ghc-7.8.3\lens-4.11\html\lens.haddock
haddock-html: C:\Users\Jonatan\Desktop\Haskell\projects\Jeopardy\.cabal-sandbox\doc\x86_64-windows-ghc-7.8.3\lens-4.11\html
